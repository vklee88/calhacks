{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","BROWSER_ERR","PERMISSION_ERR","RATE","URL","videoRef","React","createRef","state","err","socket","storedStream","snapshotter","uploadData","bind","assertThisInitialized","_this2","video","current","navigator","mediaDevices","getUserMedia","io","setState","on","then","stream","src","window","createObjectURL","finished","setInterval","takeASnap","blob","ack","console","log","catch","message","name","alert","close","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","getTracks","Symbol","iterator","next","done","value","stop","return","clearInterval","vid","canvas","document","createElement","ctx","getContext","width","height","drawImage","Promise","res","rej","toBlob","reader","FileReader","readAsDataURL","onloadend","base64data","result","_this3","emit","_this4","react_default","a","onClick","startRecording","stopRecording","ref","autoPlay","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a093fd2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  BROWSER_ERR = \"You seem to using a browser that does not support video. \" +\r\n                \"Please don't use IE or upgrade your browser.\";\r\n  PERMISSION_ERR = \"You need to allow access to a camera to run this app.\";\r\n  RATE = 1000;\r\n  URL = 'http://localhost:5000';\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.videoRef = React.createRef();\r\n    this.state = {\r\n      err: null,\r\n      // mediaRecorder: null,\r\n      socket: null,\r\n      storedStream: null,\r\n      snapshotter: null\r\n    };\r\n\r\n    this.uploadData = this.uploadData.bind(this);\r\n  }\r\n\r\n  startRecording() {\r\n    if (this.state.storedStream) {\r\n      return;\r\n    }\r\n    let video = this.videoRef.current;\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      let socket = io(this.URL);\r\n      this.setState({socket: socket});\r\n      socket.on('connect', () => {\r\n        navigator.mediaDevices.getUserMedia({video: true})\r\n          .then(stream => {\r\n            video.src = window.URL.createObjectURL(stream);\r\n            // TODO MediaRecorder is a firefox/chrome only feature\r\n            // let mediaRecorder = new MediaRecorder(stream, {\r\n            //   mimeType : 'video/webm'\r\n            // });\r\n            // mediaRecorder.start(this.RATE);\r\n            // mediaRecorder.ondataavailable = this.uploadData;\r\n            // this.setState({err: null, storedStream: stream, mediaRecorder: mediaRecorder});\r\n            let finished = true; // hack to make sure that we're not overloading system; assumption is that RATE is not too small\r\n            let snapshotter = setInterval(() => {\r\n              if (!finished) {\r\n                return;\r\n              }\r\n              finished = false;\r\n              this.takeASnap(video)\r\n                .then((blob) => {\r\n                  return this.uploadData(blob);\r\n                }).then(ack => {\r\n                  console.log(ack);\r\n                  finished = true;\r\n                }).catch(err => {\r\n                  console.log('Failed response from server');\r\n                  finished = true;\r\n                });\r\n            }, this.RATE);\r\n\r\n            this.setState({err: null, storedStream: stream, snapshotter: snapshotter});\r\n          })\r\n          .catch(err => {\r\n            let message = err.message;\r\n            if (err.name === \"PermissionDeniedError\") {\r\n              message = this.PERMISSION_ERR;\r\n            }\r\n            this.setState({err: message});\r\n          });\r\n      });\r\n      socket.on('connect_timeout', () => {\r\n        alert('Timeout when connecting to server');\r\n        this.state.socket.close();\r\n        this.setState({socket: null});\r\n      });\r\n    } else {\r\n        this.setState({err: this.BROWSER_ERR});\r\n    }\r\n  }\r\n\r\n  stopRecording() {\r\n    if (this.state.socket) {\r\n      this.state.socket.close();\r\n      this.setState({socket: null});\r\n    }\r\n    if (this.state.storedStream) {\r\n      for (let track of this.state.storedStream.getTracks()) {\r\n        track.stop();\r\n      }\r\n      this.setState({storedStream: null});\r\n    }\r\n    if (this.state.snapshotter) {\r\n      clearInterval(this.state.snapshotter);\r\n      this.setState({snapshotter: null});\r\n    }\r\n    // if (this.state.mediaRecorder) {\r\n    //   this.state.mediaRecorder.stop();\r\n    //   this.setState({mediaRecorder: null});\r\n    // }\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/46882550/how-to-save-a-jpg-image-video-captured-with-webcam-in-the-local-hard-drive-with\r\n  takeASnap(vid){\r\n    const canvas = document.createElement('canvas'); // create a canvas\r\n    const ctx = canvas.getContext('2d'); // get its context\r\n    canvas.width = vid.width; // set its size to the one of the video\r\n    canvas.height = vid.height;\r\n    ctx.drawImage(vid, 0,0, canvas.width, canvas.height); // the video\r\n    return new Promise((res, rej)=>{\r\n      canvas.toBlob((blob) => {\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(blob);\r\n        reader.onloadend = function() {\r\n          let base64data = reader.result;\r\n          res(base64data);\r\n        }\r\n      }, 'image/jpeg'); // request a Blob from the canvas\r\n    });\r\n  }\r\n\r\n  uploadData(blob) {\r\n    // console.log(blobEvent);\r\n    // console.log(this.state.socket);\r\n    if (this.state.socket) {\r\n      return new Promise((res, rej) => {\r\n        this.state.socket.emit('data', blob, (ack) => {\r\n          if (ack) {\r\n            res(ack);\r\n          } else {\r\n            rej('Not acknowledged')\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button onClick={() => this.startRecording()}>Start Video</button>\r\n          <button onClick={() => this.stopRecording()}>End Video</button>\r\n        </div>\r\n        {this.state.err && <p>{this.state.err} Refresh the browser and try again.</p>}\r\n        <video height='300' width='300' ref={this.videoRef} autoPlay></video>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}